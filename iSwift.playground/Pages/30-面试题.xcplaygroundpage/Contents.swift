//: [Previous](@previous)

import Foundation

var greeting = "Hello, playground"

//1、Swift中的写时复制？
/*
 写时复制是一种优化内存技术，只用于值类型。将值类型赋值给另一个变量或者常量时，原始值会创建一个副本，副本和原始值是完全独立的，但不改变时这种复制开销是没有必要，写时复制就是为了优化这种场景，当一个不可变类型实例被赋值时，实际上只会增加一个指向原数据的引用计数。只有在进行修改时，才会对值进行复制。
 isKnownUniquelyReferenced:使用此函数判断是否开启写时复制。
 */

//2、Swift中的Struct和Class的区别？
/*
 1、Struct是值类型、Class是引用类型
 */

//3、Swift中函数派发机制？
/*
 1、直接派发：函数地址直接调用
 2、函数表派发：虚函数表
 3、消息机制派发：就是消息发送流程
 */

//4、swift为什么推荐结构体而不是class？
/*
 1、性能优化栈上内存分配和释放速度快，无需管理引用计数。
 2、写时复制优化
 3、没有继承和多态的开销
 */

//5、高阶函数是什么
/*
 高阶函数是至少满足下列一个条件的函数：
 - 接受一个或多个函数作为输入
 - 输出一个函数
 */

//6、柯里化
/*
 将一个多参数的函数转换为单参数函数并且这个函数的返回值也是一个函数
 */

//7、是什么函数式编程
/*
 函数式编程指的是数学意义上的函数，即映射关系（如：y = f(x),就是 y 和 x 的对应关系,可以理解为"像函数一样的编程").它的主要思想是把运算过程尽量写成一系列嵌套的函数调用。
 例：
 数学表达式
 (1 + 2) * 3 - 4
 传统编程
 var a = 1 + 2
 var b = a * 3
 var c = b - 4
 函数式编程
 var result = subtract(multiply(add(1,2), 3), 4)

 函数是"第一等公民"
 函数和其他数据类型一样，可以作为参数，可以赋值给其他变量，可以作为返回值。
 例：
 var print = function(i){
   console.log(i)
 }
 [1,2,3].forEach(print)
 */

//8、说说Swift为什么将String,Array,Dictionary设计成值类型
/*
 - 值类型和引用类型的内存使用的高效性不同，值类型一般在栈上比引用类型在堆上要高效。
 - 线程安全性，值类型的线程安全性高，不会出现崩溃，但会出现数据异常。
 */

//: [Next](@next)
